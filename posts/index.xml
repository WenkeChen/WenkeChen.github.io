<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on wenkechen</title>
    <link>https://wenkechen.github.io/posts/</link>
    <description>Recent content in Posts on wenkechen</description>
    <image>
      <url>https://wenkechen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wenkechen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Apr 2023 21:24:46 +0800</lastBuildDate><atom:link href="https://wenkechen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL事务隔离</title>
      <link>https://wenkechen.github.io/posts/mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</link>
      <pubDate>Fri, 21 Apr 2023 21:24:46 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</guid>
      <description>本文联合chatGPT，采用问答形式编写
MySQL事务隔离 MySQL事务隔离是指在多个并发事务同时操作数据库时，为了保证数据的一致性和隔离性，系统采取的一种控制机制。MySQL提供了四种事务隔离级别，分别为READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。
READ UNCOMMITTED：最低级别的隔离级别，事务可以读取到其他事务未提交的数据，容易导致脏读、不可重复读和幻读等问题。
READ COMMITTED：保证事务可以读取到其他事务已经提交的数据，避免了脏读的问题，但是可能出现不可重复读和幻读。
REPEATABLE READ：保证在事务执行期间，多次读取同一记录的结果是一致的，避免了不可重复读的问题，但是可能出现幻读。
SERIALIZABLE：最高级别的隔离级别，通过强制事务串行执行来避免脏读、不可重复读和幻读等问题，但是并发性能较差。
在实际应用中，需要根据业务需求和数据完整性要求选择合适的事务隔离级别。例如，在对数据一致性要求较高的金融应用中，通常需要使用较高的事务隔离级别，而对于并发量较高、对数据一致性要求较低的应用，则可以使用较低的事务隔离级别以提高并发性能。
什么是不可重复读和幻读 不可重复读和幻读都是并发事务访问数据库时可能出现的问题，它们的出现与事务隔离级别有关。
不可重复读：指在同一个事务中，多次读取同一记录，但每次读取的结果不同。例如，事务A读取某一行数据，然后事务B修改了该行数据并提交，事务A再次读取该行数据时发现数据已经发生了改变。这种情况可能会导致数据不一致的问题。
幻读：指在同一个事务中，多次执行同一个查询，但每次查询的结果不同。例如，事务A执行一条查询语句得到了结果集，然后事务B插入了一些新的数据并提交，事务A再次执行同样的查询语句，结果集中却多了一些新的行，这种情况也可能导致数据不一致的问题。
不可重复读和幻读的区别在于，不可重复读是针对同一个记录的读取结果不一致，而幻读是针对结果集的行数不一致。在MySQL中，不可重复读可以通过使用REPEATABLE READ或SERIALIZABLE隔离级别来避免，而幻读则需要使用SERIALIZABLE隔离级别才能完全避免。
REPEATABLE READ如何保证在事务执行期间，多次读取同一记录的结果是一致的 REPEATABLE READ是MySQL提供的一种事务隔离级别，它可以保证在同一个事务中，多次读取同一记录的结果是一致的。具体实现方式如下：
事务在开始时，会创建一个快照（snapshot）来记录当前的数据库状态。
在事务执行期间，事务中的所有读取操作都会使用该快照来读取数据，而不是直接读取数据库中的数据。这样可以保证多次读取同一记录的结果是一致的，因为在快照创建后，其他事务对该记录的修改不会对该事务造成影响。
当事务提交或回滚时，快照也会被销毁，从而使得其他事务可以看到该事务所做的修改。
通过使用快照来读取数据，REPEATABLE READ可以避免不可重复读的问题。但是，由于在事务执行期间其他事务对数据库的修改不会对该事务造成影响，所以可能会出现幻读的问题。幻读指的是在同一个事务中多次执行相同的查询语句，但是每次返回的结果集中的行数不同。为了避免幻读问题，需要使用更高级别的事务隔离级别，如SERIALIZABLE。
REPEATABLE READ其他事务不会对该事务数据库造成影响，每次查询应该是一样的才对，为什么还会出现幻读 您说得没错，REPEATABLE READ确实可以避免不可重复读的问题，保证同一事务中多次读取同一记录的结果是一致的。但是，REPEATABLE READ并不能完全避免幻读问题。
幻读指的是在同一事务中多次执行相同的查询语句，但是每次返回的结果集中的行数不同。幻读的出现与修改操作有关，而REPEATABLE READ对于修改操作只做了部分限制，因此可能会出现幻读问题。具体来说，REPEATABLE READ只对于数据行的修改做了限制，但是对于新插入的数据和删除的数据并没有限制，因此在同一事务中多次执行相同的查询语句时，可能会出现新插入的数据或删除的数据影响查询结果的情况，从而导致幻读问题的出现。
为了避免幻读问题，需要使用更高级别的事务隔离级别，如SERIALIZABLE。SERIALIZABLE可以在事务执行期间锁定满足查询条件的所有行，从而保证多次执行相同查询语句返回的结果集中行数不变。
SERIALIZABLE原理，为什么可以避免幻读 SERIALIZABLE是MySQL提供的一种最严格的事务隔离级别，它可以避免幻读问题的出现。SERIALIZABLE的实现原理是通过使用行级锁和间隙锁来保证事务的串行执行。
在SERIALIZABLE隔离级别下，当一个事务对某些数据行进行了读取或修改时，它会对这些数据行加上行级锁，这样其他事务就无法同时读取或修改这些数据行，直到该事务释放这些锁。同时，为了避免新插入的数据或删除的数据对查询结果造成影响，SERIALIZABLE还会对符合查询条件但不存在的数据行进行间隙锁定，以防止其他事务在查询结果集中插入或删除数据。
通过行级锁和间隙锁的加锁机制，SERIALIZABLE可以保证在事务执行期间，其他事务无法同时修改或插入符合查询条件的数据，从而避免了幻读的出现。但是，由于SERIALIZABLE的加锁机制比较严格，可能会影响并发性能，因此在实际应用中需要根据业务场景选择合适的隔离级别。</description>
    </item>
    
    <item>
      <title>golang热加载及代码调试</title>
      <link>https://wenkechen.github.io/posts/golang%E7%83%AD%E5%8A%A0%E8%BD%BD%E5%8F%8A%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sun, 27 Mar 2022 19:38:07 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/golang%E7%83%AD%E5%8A%A0%E8%BD%BD%E5%8F%8A%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/</guid>
      <description>热加载 为什么需要热加载 在编写go程序的过程中，每次修改完代码我们都得重新编译运行它，这是一个重复且麻烦的过程。那么有没有什么方法可以免去这个步骤，使得每次我们修改完代码自动编译并运行程序呢？
实现 这里要介绍一个用专门用于热加载golang程序的包 air
安装 $ go install github.com/cosmtrek/air@latest 使用 进入项目目录 初始化配置文件 $ air init 修改配置文件 实例文件 # Config file for [Air](https://github.com/cosmtrek/air) in TOML format # 工作目录 # .或者绝对路径，注意下面的路径必须是相对于根路径的 root = &amp;#34;.&amp;#34; tmp_dir = &amp;#34;tmp&amp;#34; [build] # 老的shell命令，也可以使用`make` cmd = &amp;#34;go build -o ./tmp/main .&amp;#34; # 从`cmd`产生的二进制文件. bin = &amp;#34;tmp/main&amp;#34; # 自定义编译二进制文件，可以在运行命令的时候设置环境变量 full_bin = &amp;#34;APP_ENV=dev APP_USER=air ./tmp/main&amp;#34; # 监视扩展名为以下类型的文件 include_ext = [&amp;#34;go&amp;#34;, &amp;#34;tpl&amp;#34;, &amp;#34;tmpl&amp;#34;, &amp;#34;html&amp;#34;] # 忽略以下目录下的文件修改 exclude_dir = [&amp;#34;assets&amp;#34;, &amp;#34;tmp&amp;#34;, &amp;#34;vendor&amp;#34;, &amp;#34;frontend/node_modules&amp;#34;] # 监视这些目录下文件的修改 include_dir = [] # 忽略以下文件 exclude_file = [] # 排除符合以下正则表达式的文件 exclude_regex = [&amp;#34;_test.</description>
    </item>
    
    <item>
      <title>Golang排序</title>
      <link>https://wenkechen.github.io/posts/sort.sort%E6%BA%90%E7%A0%81/</link>
      <pubDate>Mon, 07 Mar 2022 14:12:47 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/sort.sort%E6%BA%90%E7%A0%81/</guid>
      <description>问题 golang的排序函数非常强大，对于一些类型的切片(int,float64,string)，可以很方便地进行排序，那么它是怎么实现的呢？如果对于一个struct切片，要想根据其中一个field从大到小的顺序进行排列可以实现吗？怎么实现？
探索 首先进入包内看一下方法实现：
// 实现了Interface接口的类型可以被此包中的routines排序 // 这些方法通过整数索引引用基础集合的元素 type Interface interface { // Len 集合中的元素个数 Len() int // Less 反映了索引i处元素是否必须排列在索引j处元素之前 // // 如果Less(i, j)和Less(j, i)均返回false // 那么索引i处元素和索引j处元素视为相等 // Sort 可能在最终的结果中以任意顺序排列相等的元素（不稳定） // 稳定 即保留了相同元素的原始输入顺序 // // Less必须描述一个传递排序： // - 如果Less(i, j)和Less(j, k)均返回true，那么Less(i, k)也必须返回true。 // - 如果Less(i, j)和Less(j, k)军返回false，那么Less(i, k)也必须返回false。 // // 注意浮点型比较（float32或float64类型的值上的&amp;lt;运算符） // 当涉及非数字not-a-number (NaN) 值时，它不是传递排序 // 对于浮点型值的正确实现参见 Float64Slice.Less Less(i, j int) bool // Swap 交换索引i处和索引j处的值 Swap(i, j int) } // Sort 对数据排序 // 通过调用data.</description>
    </item>
    
    <item>
      <title>MySQL删除重复记录的几种方法</title>
      <link>https://wenkechen.github.io/posts/mysql%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 10 Feb 2022 17:47:05 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/mysql%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>问题 这里有这么一张学生信息表，表结构如下：
CREATE TABLE `students` ( `id` int UNSIGNED NOT NULL AUTO_INCREMENT, `name` varchar(30) NOT NULL, `gender` tinyint(1) UNSIGNED NOT NULL, `age` int UNSIGNED NOT NULL, PRIMARY KEY (`id`) ); 现name,gender,age三个字段均相同，则可认定这是同一个学生；但是由于表没有加联合唯一索引，所以表里面有很多重复的记录，怎么样使相同的记录只保留一条？
解答 若是查询，我们大可用group by然后having count或者distinct来合并查询一条，但是删除好似没有这样方便的语句。所以总结了一些比较好的方法：
创建联合唯一索引 这是最简单方便的一条了
ALTER IGNORE TABLE students ADD UNIQUE INDEX idx_name_gender_age (name, gender, age); 注意这个IGNORE，由于表里面已经有重复记录了，所以直接创建会出现错误。执行之后，所有的重复记录都会被自动删除（只保留一条），而且以后也无法插入重复记录了。
自关联 如果你没有修改数据库结构的权限，那下面这条肯定适合你
DELETE `a` FROM `students` AS `a`, `students` AS `b` WHERE -- IMPORTANT: Ensures one version remains -- Change &amp;#34;ID&amp;#34; to your unique column&amp;#39;s name `a`.</description>
    </item>
    
    <item>
      <title>关于CSRF与表单重复提交</title>
      <link>https://wenkechen.github.io/posts/%E5%85%B3%E4%BA%8Ecsrf%E4%B8%8E%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Wed, 09 Feb 2022 15:50:59 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/%E5%85%B3%E4%BA%8Ecsrf%E4%B8%8E%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</guid>
      <description>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。
问题 抵御跨站请求伪造和表单重复提交最有效的手段都是在表单中加一个token，那么CSRF的token能用于防御表单重复提交吗？
求证 扒了一下symfony关于CSRF token的生成源码。
通过tokenId获取token
public function getCsrfToken(string $tokenId): string { return $this-&amp;gt;csrfTokenManager-&amp;gt;getToken($tokenId)-&amp;gt;getValue(); } 如果存储中存在对应的token就直接拿，否则创建
public function getToken($tokenId) { $namespacedId = $this-&amp;gt;getNamespace().$tokenId; if ($this-&amp;gt;storage-&amp;gt;hasToken($namespacedId)) { $value = $this-&amp;gt;storage-&amp;gt;getToken($namespacedId); } else { $value = $this-&amp;gt;generator-&amp;gt;generateToken(); $this-&amp;gt;storage-&amp;gt;setToken($namespacedId, $value); } return new CsrfToken($tokenId, $value); } 真正的生成的方法
class UriSafeTokenGenerator implements TokenGeneratorInterface { private $entropy; /** * Generates URI-safe CSRF tokens.</description>
    </item>
    
    <item>
      <title>Jetbrains开源许可证申请花絮</title>
      <link>https://wenkechen.github.io/posts/jetbrains%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E7%94%B3%E8%AF%B7%E8%8A%B1%E7%B5%AE/</link>
      <pubDate>Sun, 02 Jan 2022 20:26:26 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/jetbrains%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E7%94%B3%E8%AF%B7%E8%8A%B1%E7%B5%AE/</guid>
      <description>网上关于Jetbrains开源许可证的教程非常多，这里就不赘述了，没啥价值。
前几天IDEA的试用到期，不想找那些破解工具了，刚好想起一个因兴趣写的一个开源项目，于是尝试着用那个项目申请Jetbrains的开源许可证。
由于我本人的问题，这个开源项目虽然开发事件跨度有一年多，但是申请前3个月没有过提交记录，所以没有通过Jetbrains的检测程序，于是收到了不通过的邮件： 抱着试一试的心态，我给她们发了申诉邮件： 可能Jetbrains的初衷也是为了防止申请泛滥，所以给我这种情况开了绿灯（外国企业虽然回复慢但是质量都非常高！） Jetbrains虽然收费贵，但我仍然觉得他是一家伟大的公司~</description>
    </item>
    
    <item>
      <title>没什么可以写的就先不写吧</title>
      <link>https://wenkechen.github.io/posts/%E6%B2%A1%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%86%99%E7%9A%84%E5%B0%B1%E5%85%88%E4%B8%8D%E5%86%99%E5%90%A7/</link>
      <pubDate>Sun, 19 Dec 2021 00:10:25 +0800</pubDate>
      
      <guid>https://wenkechen.github.io/posts/%E6%B2%A1%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%86%99%E7%9A%84%E5%B0%B1%E5%85%88%E4%B8%8D%E5%86%99%E5%90%A7/</guid>
      <description>为什么以前会写 在我刚毕业的时候，我对技术有着极其浓厚的兴趣。每天上下班都是在写代码，甚至睡觉的时候，脑子里也在运行着代码。那时候，我每天都在浏览大量的技术博客，从一个博客外链点到另一个，乐此不疲。大量的博客内容以及文章评论，给我灌输了一个观念：要养成写博客的习惯，做好技术积累！
为什么后来不写了 事实上我也是这么照做的，一开始我在CSDN上写（虽然CSDN满屏广告以及低劣的文章内容经常遭人诟病，但是不得不说它的书写体验以及SEO做的是真的不错）也收到了挺多的点赞评论（但是我发现技术文章也会有热点，跟文章深度无关），再后来我搭建了自己的博客系统写。我认认真真地总结我处理问题的过程，即使是搬运的文章我也会在后面写上我自己的思想总结，但是随着时间的推移，我发现了一些问题：
我写出来的东西很一般 总结问题解决的过程其实就是把问题重复解决一遍，并且加上文字记录。然而第一遍还算有趣，但是第二遍就变得繁琐枯燥了。如果解决问题的过程很长，文章的篇幅就会大，要花费大量的时间在文章的排版润色上；一个问题往往是多个小问题的组成，不知道是自己看自己写的东西会严格一点还是花费的时间太少的原因，我总觉得最后的总结版写的不如小问题的原版。
我记录的东西过于简单 记录的时候发现挺难的东西在一段时间过后回头来看总觉得太简单幼稚了。当然不是说简单的问题就不用记录，而是觉得如此简单的东西如果没有更好的解决方案就不应该在互联网上重复被记录，记录的多了反而成互联网垃圾了。
我很少回头翻阅自己记录的东西 这个可能跟上面的原因有关系，随着经验的积累，我很少会回头翻阅以前记录的东西。写博客的目的就是为了记录与分享，这种学了一次就会，而且不会再回头看的技术，我想不需要重复记录多次。
我为什么现在创建这个博客 搭建这个博客其实主要还是为了展示简历上的一些东西吧。以前用hexo搭建过一个，后来学习了go，一直想用一下hugo，直到最近发现了这个宝藏主题，大道至简啊有没有。
我现在不记录不代表我否定博客的作用，记录博客是非常有必要的，以后我也会接着记录下去，只不过在我找到一个好的记录方式之前，我还是不给自己设立太多条条框框，随便写写吧，实在没啥好写的话就不写了。</description>
    </item>
    
  </channel>
</rss>
